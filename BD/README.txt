##############################################################################################														      ####			     												####  				Query SQL Proggetto cod.OOBD2122_08 					####															####		Cognome	Nome		Matricola	Indirizzo e-mail istituzionale		####															####		Cesarano	Agostino	N86003587	ag.cesarano@studenti.unina.it			####															####		Fortino	Alessandro	N86003884	ale.fortino@studenti.unina.it 		####														      ####														      ##############################################################################################--Query per la creazione del DatabaseCREATE DATABASE "Project" WITH TEMPLATE = template0 ENCODING = 'UTF8' LOCALE = 'Italian_Italy.1252';COMMENT ON DATABASE "Project" IS 'Database per il Proggetto di Basi di Dati I';_________________________________________________________________________________________________________________________________________________________--Dominio del valore di sesso in UtenteCREATE DOMAIN public.sesso AS character(1)CONSTRAINT sesso_check CHECK (((VALUE = 'M'::bpchar) OR (VALUE = 'F'::bpchar)));_________________________________________________________________________________________________________________________________________________________--Trigger Function che,in seguito all'UPDATE sulla tabella "Prenotazioni",calcola le Statistiche sulle Presenze.CREATE FUNCTION public.calcolastatistiche() RETURNS triggerLANGUAGE plpgsqlDECLARE    ris_stat "Statistiche"%RowType;BEGINSELECT MIN(coalesce(numero_presenti, 0)),MAX(coalesce(numero_presenti, 0)),avg(coalesce(numero_presenti, 0)) into ris_statFROM (SELECT numero_presenti    FROM (SELECT "codLezione"        FROM "Prenotazioni" NATURAL JOIN "Lezione"        WHERE "codCorso" IN(SELECT "codCorso"                          FROM "Lezione"                          WHERE "codLezione"=new."codLezione")    GROUP BY "codLezione") as res NATURAL LEFT JOIN    (SELECT "codLezione",count(*) AS "numero_presenti"     FROM "Prenotazioni" NATURAL JOIN "Lezione"     WHERE "codCorso" IN(SELECT "codCorso"                         FROM "Lezione"                         WHERE "codLezione"=new."codLezione")    AND "Presente"=true     GROUP BY "codLezione") as res1)as results;    UPDATE "Statistiche" SET "presenzeMassime"=ris_stat."presenzeMassime",                             "presenzeMinime"=ris_stat."presenzeMinime",                             "presenzeMedie"=ris_stat."presenzeMedie"    WHERE "codCorso" IN(SELECT "codCorso"                        FROM "Lezione"                        WHERE "codLezione"=NEW."codLezione");    RETURN new;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che,in seguito all'UPDATE,DELETE,INSERT sulla tabella "Iscritti",calcola la "percentuale di riempimento" di un Corso	e la inserisce nelle Statistiche.CREATE FUNCTION public.calcoloiscritti() RETURNS triggerLANGUAGE plpgsqlDECLARE	percentuale integer;	numeroiscritti integer;BEGIN    SELECT count(*) into numeroiscritti    FROM "Iscritti"    WHERE "codCorso"=new."codCorso" AND "Richiesta"=true;    IF numeroiscritti=0 THEN    percentuale=0;    ELSE        SELECT 100/("iscrizioniMassime"/numeroiscritti) into percentuale        FROM "Corso"        WHERE "codCorso"=new."codCorso";    END IF;        UPDATE "Statistiche"    SET "percentualeRempimento"=percentuale    WHERE "codCorso"= new."codCorso";    return new;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che,in seguito all'INSERT sulla tabella "Iscritti",setta il valore di Richiesta in base al tipo di Corso,se è Privato la	Richiesta sarà FALSE se è Pubblico la Richiesta sarà TRUE.CREATE FUNCTION public.checkcorsopublic() RETURNS triggerLANGUAGE plpgsqlDECLARE    corso "Corso"%rowtype;BEGIN    SELECT *    FROM "Corso"    INTO corso    WHERE "codCorso"= NEW."codCorso";    if(corso."Privato"=false)then    NEW."Richiesta"=true;    RETURN NEW;    else        NEW."Richiesta"=false;        RETURN NEW;end if;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che,in seguito all'UPDATE sulla tabella "Prenotazioni",setta il valore di Idoneo a TRUE se si è raggiunto il tasso di presenze minimo.CREATE FUNCTION public.checkidoneo() RETURNS triggerLANGUAGE plpgsqlDECLARE presenze real;lezioniminime numeric;tasso numeric;BEGIN                  SELECT "tassoPresenzeMinime"*"numeroLezioni" into tassoFROM "Corso"WHERE "codCorso" IN (Select "codCorso"                     FROM "Lezione"                     WHERE "Lezione"."codLezione"=new."codLezione");lezioniminime=round(tasso/100);SELECT count(*) into presenzeFROM "Prenotazioni" NATURAL JOIN "Lezione"WHERE "codStudente"=NEW."codStudente"AND "codCorso" IN (Select "codCorso"    FROM "Lezione"    WHERE "Lezione"."codLezione"=new."codLezione")AND "Presente"=true;IF lezioniminime <= presenze THENUPDATE "Iscritti" SET "Idoneo"=trueWHERE "codStudente"=NEW."codStudente" AND "codCorso" IN (Select "codCorso"    FROM "Lezione"    WHERE "Lezione"."codLezione"=new."codLezione");ELSEUPDATE "Iscritti" SET "Idoneo"=falseWHERE "codStudente"=NEW."codStudente" AND "codCorso" IN (Select "codCorso"    FROM "Lezione"    WHERE "Lezione"."codLezione"=new."codLezione");END IF;return new;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che non permette l'iscrizione nel caso in cui è stato raggiunto il numero massimo di Iscritti.CREATE FUNCTION public.checkiscritti() RETURNS triggerLANGUAGE plpgsqlDECLARE	conteggio integer;	massimo integer;BEGINSELECT count(*) into conteggioFROM "Iscritti"WHERE "codCorso"=new."codCorso";SELECT "iscrizioniMassime" into massimoFROM "Corso"WHERE "codCorso"=new."codCorso";IF conteggio<massimo THENreturn new;elsereturn null;END IF;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che non permette l'inserimento di una Lezione nel caso in cui è stato raggiunto il numero di Lezioni progammate.CREATE FUNCTION public.checklezione() RETURNS triggerLANGUAGE plpgsqlDECLARE	conteggio integer;	massimo integer;BEGINSELECT count(*) into conteggioFROM "Lezione"WHERE "codCorso"=new."codCorso";SELECT "numeroLezioni" into massimoFROM "Corso"WHERE "codCorso"=new."codCorso";IF conteggio<massimo THENreturn new;elsereturn null;END IF;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che,nel caso in cui è presente un Operatore che non coordina Corsi,elimina l'operatore dalla tabella Operatore.CREATE FUNCTION public.checkoperatore() RETURNS triggerLANGUAGE plpgsqlBEGINDELETE FROM "Operatore"WHERE "codOperatore" NOT IN(SELECT "codOperatore"                            FROM "Coordina");RETURN OLD;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che,nel caso in cui è presente uno Studente che non coordina Corsi,elimina lo studente dalla tabella Studente.CREATE FUNCTION public.checkstudente() RETURNS triggerLANGUAGE plpgsqlDELETE FROM "Studente"WHERE "codStudente" NOT IN(SELECT "codStudente"                            FROM "Iscritti");RETURN OLD;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che genera le statistiche di Default per un nuovo Corso.CREATE FUNCTION public.creastatistiche() RETURNS triggerLANGUAGE plpgsqlBEGININSERT INTO "Statistiche" VALUES(0,0,0,0,NEW."codCorso");RETURN new;END_________________________________________________________________________________________________________________________________________________________--Trigger Function che setta la descrizione nel caso in cui è '' uguale a "Nessuna Descrizione".CREATE FUNCTION public."defaultvalueDescrizione"() RETURNS triggerLANGUAGE plpgsqlBEGINIF NEW."descrizione" ='' THENNEW."descrizione"='Nessuna Descrizione';END IF;return NEW;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che genera un codCorso univoco.CREATE FUNCTION public."generatecodCorso"() RETURNS triggerLANGUAGE plpgsqlBEGIN    LOOP            NEW."codCorso" =('C' || CAST(nextval('seqcorso') AS char));            if NOT EXISTS (select "codCorso" FROM "Corso" WHERE "codCorso"= new."codCorso" ) then                RETURN NEW;            end if;    END LOOP;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che genera un codGestore univoco.CREATE FUNCTION public."generatecodGestore"() RETURNS triggerLANGUAGE plpgsqlBEGIN    LOOP            NEW."codGestore" =('G' || CAST(nextval('seqgestore') AS char));            if NOT EXISTS (select "codGestore" FROM "Gestore" WHERE "codGestore"= new."codGestore" ) then                RETURN NEW;            end if;    END LOOP;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che genera un codLezione univoco.CREATE FUNCTION public."generatecodLezione"() RETURNS triggerLANGUAGE plpgsqlBEGIN    LOOP            NEW."codLezione" =('L' || CAST(nextval('seqlezione') AS char));            if NOT EXISTS (select "codLezione" FROM "Lezione" WHERE "codLezione"= new."codLezione" ) then                RETURN NEW;            end if;    END LOOP;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che genera un codOperatore univoco.CREATE FUNCTION public."generatecodOperatore"() RETURNS triggerLANGUAGE plpgsqlBEGIN    LOOP            NEW."codOperatore" =('O' || CAST(nextval('seqoperatore') AS char));            if NOT EXISTS (select "codOperatore" FROM "Operatore" WHERE "codOperatore"= new."codOperatore" ) then                RETURN NEW;            end if;    END LOOP;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che genera un codStudente univoco.CREATE FUNCTION public."generatecodStudente"() RETURNS triggerLANGUAGE plpgsqlBEGIN    LOOP            NEW."codStudente" =('S' || CAST(nextval('seqstudente') AS char));            if NOT EXISTS (select "codStudente" FROM "Studente" WHERE "codStudente"= new."codStudente" ) then                RETURN NEW;            end if;    END LOOP;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che non permette l'inserimento di un tag già presente.CREATE FUNCTION public.noprimarykeyviolation() RETURNS triggerLANGUAGE plpgsqlBEGIN            if NOT EXISTS (select "tag" FROM "AreaTematica" WHERE "tag"= new."tag" ) then                RETURN NEW;            end if;RETURN null;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che resetta la Sequence che permette il calcolo di un codCorso univoco.CREATE FUNCTION public."resetseqCorso"() RETURNS triggerLANGUAGE plpgsqlBEGIN ALTER SEQUENCE seqcorsoRESTART WITH 0;RETURN NEW;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che resetta la Sequence che permette il calcolo di un codGestore univoco.CREATE FUNCTION public."resetseqGestore"() RETURNS triggerLANGUAGE plpgsqlBEGIN ALTER SEQUENCE seqgestoreRESTART WITH 0;RETURN NEW;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che resetta la Sequence che permette il calcolo di un codLezione univoco.CREATE FUNCTION public."resetseqLezione"() RETURNS triggerLANGUAGE plpgsqlBEGIN ALTER SEQUENCE seqlezioneRESTART WITH 0;RETURN NEW;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che resetta la Sequence che permette il calcolo di un codOperatore univoco.CREATE FUNCTION public."resetseqOperatore"() RETURNS triggerLANGUAGE plpgsqlBEGIN ALTER SEQUENCE seqoperatoreRESTART WITH 0;RETURN NEW;END;_________________________________________________________________________________________________________________________________________________________--Trigger Function che resetta la Sequence che permette il calcolo di un codStudente univoco.CREATE FUNCTION public."resetseqStudente"() RETURNS triggerLANGUAGE plpgsqlBEGIN ALTER SEQUENCE seqstudenteRESTART WITH 0;RETURN NEW;END;_________________________________________________________________________________________________________________________________________________________--Definizione tabella Appartiene.CREATE TABLE public."Appartiene" (    "codCorso" character(8) NOT NULL,    tag character varying(30) NOT NULL);_________________________________________________________________________________________________________________________________________________________--Definizione tabella AreaTematica.CREATE TABLE public."AreaTematica" (    tag character varying(30) NOT NULL);_________________________________________________________________________________________________________________________________________________________--Definizione tabella Autenticazione.CREATE TABLE public."Autenticazione" (    email character varying(60) NOT NULL,    password character varying(30) NOT NULL);_________________________________________________________________________________________________________________________________________________________--Definizione tabella Coordina.CREATE TABLE public."Coordina" (    "codCorso" character(8) NOT NULL,    "codOperatore" character(8) NOT NULL,    "Richiesta" boolean DEFAULT false NOT NULL);_________________________________________________________________________________________________________________________________________________________--Definizione tabella Corso.CREATE TABLE public."Corso" (    titolo character varying(50) NOT NULL,    descrizione character varying(200) DEFAULT 'Nessuna descrizione'::character varying,    "iscrizioniMassime" integer NOT NULL,    "tassoPresenzeMinime" integer NOT NULL,    "codCorso" character(8) NOT NULL,    "codGestore" character(8) NOT NULL,    "numeroLezioni" integer NOT NULL,    "Privato" boolean NOT NULL);_________________________________________________________________________________________________________________________________________________________--Definizione tabella Gestore.CREATE TABLE public."Gestore" (    nome character varying(30) NOT NULL,    descrizione character varying(200) DEFAULT 'Nessuna descrizione'::character varying,    telefono character varying(15) NOT NULL,    "codGestore" character(8) NOT NULL,    email character varying(60) NOT NULL);_________________________________________________________________________________________________________________________________________________________--Definizione tabella IscrittiCREATE TABLE public."Iscritti" (    "codCorso" character(8) NOT NULL,    "codStudente" character(8) NOT NULL,    "Idoneo" boolean DEFAULT false NOT NULL,    "Richiesta" boolean NOT NULL);_________________________________________________________________________________________________________________________________________________________--Definizione tabella LezioneCREATE TABLE public."Lezione" (    titolo character varying(50) NOT NULL,    descrizione character varying(200) DEFAULT 'Nessuna descrizione'::character varying,    "dataoraInizio" timestamp(6) without time zone NOT NULL,    durata time(6) without time zone NOT NULL,    "codLezione" character(8) NOT NULL,    "codCorso" character(8) NOT NULL);_________________________________________________________________________________________________________________________________________________________--Definizione tabella Operatore.CREATE TABLE public."Operatore" (    "codOperatore" character varying(16) NOT NULL,    "codiceFiscale" character varying(16) NOT NULL);_________________________________________________________________________________________________________________________________________________________--Definizione tabella Prenotazioni.CREATE TABLE public."Prenotazioni" (    "codLezione" character(8) NOT NULL,    "codStudente" character(8) NOT NULL,    "Presente" boolean DEFAULT false NOT NULL);_________________________________________________________________________________________________________________________________________________________--Definizione tabella Sede.CREATE TABLE public."Sede" (    "città" character varying(35) NOT NULL,    via character varying(30) NOT NULL,    civico character varying(5) NOT NULL,    provincia character varying(22) NOT NULL,    "codGestore" character(8) NOT NULL);_________________________________________________________________________________________________________________________________________________________--Definizione tabella StatisticheCREATE TABLE public."Statistiche" (    "presenzeMinime" integer NOT NULL,    "presenzeMassime" integer NOT NULL,    "presenzeMedie" real NOT NULL,    "percentualeRempimento" real NOT NULL,    "codCorso" character(8) NOT NULL);_________________________________________________________________________________________________________________________________________________________--Definizione tabella StudenteCREATE TABLE public."Studente" (    "codStudente" character varying(8) NOT NULL,    "codiceFiscale" character varying(16) NOT NULL);_________________________________________________________________________________________________________________________________________________________--Definizione tabella UtenteCREATE TABLE public."Utente" (    email character varying(60) NOT NULL,    nome character varying(30) NOT NULL,    cognome character varying(30) NOT NULL,    "dataNascita" date NOT NULL,    "comunediNascita" character varying(35) NOT NULL,    sesso public.sesso NOT NULL,    "codiceFiscale" character varying(16) NOT NULL);_________________________________________________________________________________________________________________________________________________________--Vista utile all'login Gestore.CREATE VIEW public.logingestore AS SELECT "Autenticazione".email,    "Autenticazione".password,    "Gestore".nome,    "Gestore".descrizione,    "Gestore".telefono,    "Gestore"."codGestore"   FROM (public."Autenticazione"     JOIN public."Gestore" USING (email));_________________________________________________________________________________________________________________________________________________________--Vista utile all'login Utente.CREATE VIEW public.loginutente AS SELECT "Autenticazione".email,    "Autenticazione".password,    "Utente".nome,    "Utente".cognome,    "Utente"."dataNascita",    "Utente"."comunediNascita",    "Utente".sesso,    "Utente"."codiceFiscale"   FROM (public."Autenticazione"     JOIN public."Utente" USING (email));_________________________________________________________________________________________________________________________________________________________--Vista utile all'individuazione degli Operatori dei Corsi.CREATE VIEW public.operatoricorsi AS SELECT "codOperatore",    "Utente"."codiceFiscale",    "Utente".email,    "Utente".nome,    "Utente".cognome,    "Utente"."dataNascita",    "Utente"."comunediNascita",    "Utente".sesso,    "Coordina"."codCorso",    "Coordina"."Richiesta"   FROM ((public."Utente"     JOIN public."Operatore" USING ("codiceFiscale"))     JOIN public."Coordina" USING ("codOperatore"));_________________________________________________________________________________________________________________________________________________________--Vista utile alla ricerca di Corsi.CREATE VIEW public.parametriricerca AS SELECT "Corso"."codGestore",    "Corso".descrizione,    "Corso".titolo,    "Corso"."codCorso",    "Corso"."Privato",    "Corso"."numeroLezioni",    "Corso"."tassoPresenzeMinime",    "Corso"."iscrizioniMassime",    "Gestore".nome,    "Gestore".telefono,    "Sede"."città",    "Sede".provincia   FROM ((public."Corso"     JOIN public."Gestore" USING ("codGestore"))     JOIN public."Sede" USING ("codGestore"));_________________________________________________________________________________________________________________________________________________________--Vista che ci restituisce il numero di presenti a Lezione.CREATE VIEW public.presenzelezioni AS SELECT res."codCorso",    res."codLezione",    COALESCE(res1.numero_presenti, (0)::bigint) AS numero_presenti   FROM (( SELECT "Lezione"."codCorso",            "Prenotazioni"."codLezione"           FROM (public."Prenotazioni"             JOIN public."Lezione" USING ("codLezione"))          GROUP BY "Lezione"."codCorso", "Prenotazioni"."codLezione") res     LEFT JOIN ( SELECT "Lezione"."codCorso",            "Prenotazioni"."codLezione",            count(*) AS numero_presenti           FROM (public."Prenotazioni"             JOIN public."Lezione" USING ("codLezione"))          WHERE ("Prenotazioni"."Presente" = true)          GROUP BY "Lezione"."codCorso", "Prenotazioni"."codLezione") res1 USING ("codLezione"));_________________________________________________________________________________________________________________________________________________________--Vista utile all'individuazione degli Studenti iscritti ai Corsi.CREATE VIEW public.studenticorsi AS SELECT "codStudente",    "Studente"."codiceFiscale",    "Utente".email,    "Utente".nome,    "Utente".cognome,    "Utente"."dataNascita",    "Utente"."comunediNascita",    "Utente".sesso,    "Iscritti"."codCorso",    "Iscritti"."Idoneo",    "Iscritti"."Richiesta"   FROM ((public."Studente"     JOIN public."Utente" USING ("codiceFiscale"))     JOIN public."Iscritti" USING ("codStudente"));     DROP VIEW public.studenticorsi;_________________________________________________________________________________________________________________________________________________________--Sequence per la generazione di codCorso univoco.CREATE SEQUENCE public.seqcorso    START WITH 0    INCREMENT BY 1    MINVALUE 0    MAXVALUE 9999999    CACHE 1;_________________________________________________________________________________________________________________________________________________________--Sequence per la generazione di codGestore univoco.CREATE SEQUENCE public.seqgestore    START WITH 0    INCREMENT BY 1    MINVALUE 0    MAXVALUE 9999999    CACHE 1;_________________________________________________________________________________________________________________________________________________________--Sequence per la generazione di codLezione univoco.CREATE SEQUENCE public.seqlezione    START WITH 0    INCREMENT BY 1    MINVALUE 0    MAXVALUE 9999999    CACHE 1;_________________________________________________________________________________________________________________________________________________________--Sequence per la generazione di codOperatore univoco.CREATE SEQUENCE public.seqoperatore    START WITH 0    INCREMENT BY 1    MINVALUE 0    MAXVALUE 9999999    CACHE 1;_________________________________________________________________________________________________________________________________________________________--Sequence per la generazione di codStudente univoco.CREATE SEQUENCE public.seqstudente    START WITH 0    INCREMENT BY 1    MINVALUE 0    MAXVALUE 9999999    CACHE 1;_________________________________________________________________________________________________________________________________________________________--Vincolo di Chiave Primaria sul codiceFiscale,esso è univoco.Utente utente_pkey CONSTRAINT	ALTER TABLE ONLY public."Utente"	ADD CONSTRAINT utente_pkey PRIMARY KEY ("codiceFiscale");_________________________________________________________________________________________________________________________________________________________--Vincolo di Chiave primaria sui tag.AreaTematica AreaTematica_pkey CONSTRAINT	ALTER TABLE ONLY public."AreaTematica"	ADD CONSTRAINT "AreaTematica_pkey" PRIMARY KEY (tag);_________________________________________________________________________________________________________________________________________________________--Vincolo di Chiave Primaria su email,un utente non può iscriversi con una mail già registrata,email è univoca.Autenticazione autenticazione_pkey CONSTRAINT	ALTER TABLE ONLY public."Autenticazione"	ADD CONSTRAINT autenticazione_pkey PRIMARY KEY (email);_________________________________________________________________________________________________________________________________________________________--Vincolo di Chiave Primaria su codCorso,esso è univoco.Corso corso_pkey CONSTRAINT	ALTER TABLE ONLY public."Corso"	ADD CONSTRAINT corso_pkey PRIMARY KEY ("codCorso");_________________________________________________________________________________________________________________________________________________________--Vincolo di Chiave Primaria sul codGestore,esso è univoco.Gestore gestore_pkey CONSTRAINT	ALTER TABLE ONLY public."Gestore"	ADD CONSTRAINT gestore_pkey PRIMARY KEY ("codGestore");_________________________________________________________________________________________________________________________________________________________--Vincolo di Chiave Primaria sul codLezione,esso è univoco.Lezione lezione_pkey CONSTRAINT	ALTER TABLE ONLY public."Lezione"	ADD CONSTRAINT lezione_pkey PRIMARY KEY ("codLezione");_________________________________________________________________________________________________________________________________________________________--Vincolo di Chiave Primaria sul codOperatore,esso è univoco.Operatore operatore_pkey CONSTRAINT	ALTER TABLE ONLY public."Operatore"	ADD CONSTRAINT operatore_pkey PRIMARY KEY ("codOperatore");_________________________________________________________________________________________________________________________________________________________--Vincolo di Chiave Primaria sul codStudente,esso è univoco.Studente studente_pkey CONSTRAINT	ALTER TABLE ONLY public."Studente"	ADD CONSTRAINT studente_pkey PRIMARY KEY ("codStudente");_________________________________________________________________________________________________________________________________________________________--Vincolo di Unicità sul codGestore,un Gestore ha una sola Sede.Sede unique_codGestore CONSTRAINT	ALTER TABLE ONLY public."Sede"	ADD CONSTRAINT "unique_codGestore" UNIQUE ("codGestore");_________________________________________________________________________________________________________________________________________________________--Vincolo di Unicità sul codiceFiscale,esiste un unico Operatore con quel codiceFiscale.Operatore unique_codiceFiscaleOperatore CONSTRAINT	ALTER TABLE ONLY public."Operatore"	ADD CONSTRAINT "unique_codiceFiscaleOperatore" UNIQUE ("codiceFiscale");_________________________________________________________________________________________________________________________________________________________--Vincolo di Chiave Primaria sul codiceFiscale,esiste un unico Studente con quel codiceFiscale.Studente unique_codiceFiscaleStudente CONSTRAINT	ALTER TABLE ONLY public."Studente"	ADD CONSTRAINT "unique_codiceFiscaleStudente" UNIQUE ("codiceFiscale");_________________________________________________________________________________________________________________________________________________________--Vincolo di Unicità sulla Lezione.Lezione unique_lezione CONSTRAINT	ALTER TABLE ONLY public."Lezione"	ADD CONSTRAINT unique_lezione UNIQUE ("codLezione", "codCorso");_________________________________________________________________________________________________________________________________________________________--Vincolo di Unicità su Coordina.Coordina Coordina_codCorso_codOperatore_key CONSTRAINT 	ALTER TABLE ONLY public."Coordina"	ADD CONSTRAINT "unique_coordina" UNIQUE ("codCorso", "codOperatore");_________________________________________________________________________________________________________________________________________________________--Vincolo di Unicità su Iscritti.Iscritti Iscritti_codStudente_codCorso_key CONSTRAINT	ALTER TABLE ONLY public."Iscritti"	ADD CONSTRAINT "unique_iscrizione" UNIQUE ("codStudente", "codCorso");_________________________________________________________________________________________________________________________________________________________--Vincolo di Unicità su Prenotazioni.Prenotazioni Prenotazioni_codLezione_codStudente_key CONSTRAINT	ALTER TABLE ONLY public."Prenotazioni"	ADD CONSTRAINT "unique_prenotazione" UNIQUE ("codLezione", "codStudente");_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Utente" codiceFiscale.Operatore references codiceFiscale FK CONSTRAINT	ALTER TABLE ONLY public."Operatore"	ADD CONSTRAINT "references codiceFiscale" FOREIGN KEY ("codiceFiscale") 	REFERENCES public."Utente"("codiceFiscale") ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Corso".codCorso.Iscritti references_codCorso FK CONSTRAINT	ALTER TABLE ONLY public."Iscritti"	ADD CONSTRAINT "references_codCorso" FOREIGN KEY ("codCorso") 	REFERENCES public."Corso"("codCorso") ON UPDATE CASCADE ON DELETE CASCADE;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Corso".codCorso.Lezione references_codCorso FK CONSTRAINT	ALTER TABLE ONLY public."Lezione"	ADD CONSTRAINT "references_codCorso" FOREIGN KEY ("codCorso") 	REFERENCES public."Corso"("codCorso") ON UPDATE CASCADE ON DELETE CASCADE;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Corso".codCorso.Statistiche references_codCorso FK CONSTRAINT	ALTER TABLE ONLY public."Statistiche"	ADD CONSTRAINT "references_codCorso" FOREIGN KEY ("codCorso") 	REFERENCES public."Corso"("codCorso") ON UPDATE CASCADE ON DELETE CASCADE;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Corso".codCorso.Appartiene references_codCorso FK CONSTRAINT	ALTER TABLE ONLY public."Appartiene"	ADD CONSTRAINT "references_codCorso" FOREIGN KEY ("codCorso") 	REFERENCES public."Corso"("codCorso") ON UPDATE CASCADE ON DELETE CASCADE;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Corso".codCorso.Coordina references_codCorso FK CONSTRAINT	ALTER TABLE ONLY public."Coordina"	ADD CONSTRAINT "references_codCorso" FOREIGN KEY ("codCorso") 	REFERENCES public."Corso"("codCorso") ON UPDATE CASCADE ON DELETE CASCADE;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Gestore".codGestore.Corso references_codGestore FK CONSTRAINT	ALTER TABLE ONLY public."Corso"	ADD CONSTRAINT "references_codGestore" FOREIGN KEY ("codGestore") 	REFERENCES public."Gestore"("codGestore") ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Gestore".codGestore.Sede references_codGestore FK CONSTRAINT	ALTER TABLE ONLY public."Sede"	ADD CONSTRAINT "references_codGestore" FOREIGN KEY ("codGestore") 	REFERENCES public."Gestore"("codGestore") ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Lezione".codLezione.Prenotazioni references_codLezione FK CONSTRAINT	ALTER TABLE ONLY public."Prenotazioni"	ADD CONSTRAINT "references_codLezione" FOREIGN KEY ("codLezione") 	REFERENCES public."Lezione"("codLezione") NOT VALID;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Operatore".codOperatore.Coordina references_codOperatore FK CONSTRAINT	ALTER TABLE ONLY public."Coordina"	ADD CONSTRAINT "references_codOperatore" FOREIGN KEY ("codOperatore") 	REFERENCES public."Operatore"("codOperatore") ON UPDATE CASCADE ON DELETE CASCADE;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Studente".codStudente.Prenotazioni references_codStudente FK CONSTRAINT	ALTER TABLE ONLY public."Prenotazioni"	ADD CONSTRAINT "references_codStudente" FOREIGN KEY ("codStudente") 	REFERENCES public."Studente"("codStudente") ON UPDATE CASCADE ON DELETE CASCADE;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Utente".codiceFiscale.Studente references_codiceFiscale FK CONSTRAINT	ALTER TABLE ONLY public."Studente"	ADD CONSTRAINT "references_codiceFiscale" FOREIGN KEY ("codiceFiscale") 	REFERENCES public."Utente"("codiceFiscale") ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Autenticazione".email.Utente references_email FK CONSTRAINT	ALTER TABLE ONLY public."Utente"	ADD CONSTRAINT references_email FOREIGN KEY (email)	REFERENCES public."Autenticazione"(email) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "Autenticazione".email.Gestore references_email FK CONSTRAINT	ALTER TABLE ONLY public."Gestore"	ADD CONSTRAINT references_email FOREIGN KEY (email)	REFERENCES public."Autenticazione"(email) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;_________________________________________________________________________________________________________________________________________________________--Vincolo di Forgein Key su "AreaTematica".tag.Appartiene references_tag FK CONSTRAINT	ALTER TABLE ONLY public."Appartiene"	ADD CONSTRAINT references_tag FOREIGN KEY (tag)	REFERENCES public."AreaTematica"(tag) NOT VALID;##############################################################################################				  _______________________________________				      ####				 |						     |			      ####				 |	 Riempimento della Base di Dati    |			      ####				 |_______________________________________|			      ####														      ##############################################################################################-- Durante il Restore degli Insert si consiglia la disattivazione dei Trigger,opzione presente nella pagina dedicata al Restore.INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C0      ', 'oggetti');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C0      ', 'java');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C1      ', 'sql');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C1      ', 'psql');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C1      ', 'progammazione');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C1      ', 'jdbc');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C2      ', 'matematica');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C2      ', 'analisi');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C4      ', 'storia');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C4      ', 'contemporanea');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C5      ', 'napoli');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C5      ', 'storia');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C3      ', 'algebra');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C6      ', 'autocad');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C6      ', '2d');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C6      ', 'proggettazione');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C7      ', 'photoshop');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C7      ', 'grafica');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C0      ', 'progammazione');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C0      ', 'oggetti');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C0      ', 'java');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C1      ', 'sql');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C1      ', 'psql');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C1      ', 'progammazione');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C1      ', 'jdbc');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C2      ', 'matematica');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C2      ', 'analisi');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C4      ', 'storia');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C4      ', 'contemporanea');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C5      ', 'napoli');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C5      ', 'storia');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C3      ', 'algebra');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C6      ', 'autocad');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C6      ', '2d');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C6      ', 'proggettazione');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C7      ', 'photoshop');INSERT INTO public."Appartiene" ("codCorso", tag) VALUES ('C7      ', 'grafica');INSERT INTO public."AreaTematica" (tag) VALUES ('progammazione');INSERT INTO public."AreaTematica" (tag) VALUES ('oggetti');INSERT INTO public."AreaTematica" (tag) VALUES ('java');INSERT INTO public."AreaTematica" (tag) VALUES ('sql');INSERT INTO public."AreaTematica" (tag) VALUES ('psql');INSERT INTO public."AreaTematica" (tag) VALUES ('jdbc');INSERT INTO public."AreaTematica" (tag) VALUES ('matematica');INSERT INTO public."AreaTematica" (tag) VALUES ('analisi');INSERT INTO public."AreaTematica" (tag) VALUES ('algebra');INSERT INTO public."AreaTematica" (tag) VALUES ('storia');INSERT INTO public."AreaTematica" (tag) VALUES ('contemporanea');INSERT INTO public."AreaTematica" (tag) VALUES ('napoli');INSERT INTO public."AreaTematica" (tag) VALUES ('autocad');INSERT INTO public."AreaTematica" (tag) VALUES ('2d');INSERT INTO public."AreaTematica" (tag) VALUES ('proggettazione');INSERT INTO public."AreaTematica" (tag) VALUES ('photoshop');INSERT INTO public."AreaTematica" (tag) VALUES ('grafica');INSERT INTO public."Autenticazione" (email, password) VALUES ('mariorossi@gmail.com', '123');INSERT INTO public."Autenticazione" (email, password) VALUES ('riccardo.esposito@hotmail.com', '123');INSERT INTO public."Autenticazione" (email, password) VALUES ('salvatore_aranzulla@gmail.com', '123');INSERT INTO public."Autenticazione" (email, password) VALUES ('massimo.capponera@hotmail.com', '123');INSERT INTO public."Autenticazione" (email, password) VALUES ('raffaele.amendola@gmail.com', '123');INSERT INTO public."Autenticazione" (email, password) VALUES ('ludovica_marchetti@libero.it', '123');INSERT INTO public."Autenticazione" (email, password) VALUES ('graziani.elena@libero.it', '123');INSERT INTO public."Autenticazione" (email, password) VALUES ('robertobarbato@hotmail.com', '123');INSERT INTO public."Autenticazione" (email, password) VALUES ('virginia.somma@gmail.com', '123');INSERT INTO public."Autenticazione" (email, password) VALUES ('salvatore.longobardi@gmail.com', '123');INSERT INTO public."Autenticazione" (email, password) VALUES ('info@academy.it', '123');INSERT INTO public."Autenticazione" (email, password) VALUES ('info@easytraining.it', '123');INSERT INTO public."Autenticazione" (email, password) VALUES ('info@corsiformazione.it', '123');INSERT INTO public."Autenticazione" (email, password) VALUES ('info@formazionefacile.it', '123');INSERT INTO public."Coordina" ("codCorso", "codOperatore", "Richiesta") VALUES ('C5      ', 'O5      ', true);INSERT INTO public."Coordina" ("codCorso", "codOperatore", "Richiesta") VALUES ('C6      ', 'O2      ', true);INSERT INTO public."Coordina" ("codCorso", "codOperatore", "Richiesta") VALUES ('C7      ', 'O2      ', true);INSERT INTO public."Coordina" ("codCorso", "codOperatore", "Richiesta") VALUES ('C0      ', 'O0      ', true);INSERT INTO public."Coordina" ("codCorso", "codOperatore", "Richiesta") VALUES ('C1      ', 'O0      ', true);INSERT INTO public."Coordina" ("codCorso", "codOperatore", "Richiesta") VALUES ('C4      ', 'O1      ', false);INSERT INTO public."Coordina" ("codCorso", "codOperatore", "Richiesta") VALUES ('C7      ', 'O4      ', true);INSERT INTO public."Coordina" ("codCorso", "codOperatore", "Richiesta") VALUES ('C2      ', 'O3      ', true);INSERT INTO public."Coordina" ("codCorso", "codOperatore", "Richiesta") VALUES ('C3      ', 'O3      ', true);INSERT INTO public."Corso" (titolo, descrizione, "iscrizioniMassime", "tassoPresenzeMinime", "codCorso", "codGestore", "numeroLezioni", "Privato") VALUES ('Object Oriented Programming', 'Il corso completo per la programmazione orientata ad oggetti in JAVA', 8, 66, 'C0      ', 'G0      ', 3, true);INSERT INTO public."Corso" (titolo, descrizione, "iscrizioniMassime", "tassoPresenzeMinime", "codCorso", "codGestore", "numeroLezioni", "Privato") VALUES ('Database Relazionali', 'SQL/PSQL+JDBC', 5, 50, 'C1      ', 'G0      ', 2, true);INSERT INTO public."Corso" (titolo, descrizione, "iscrizioniMassime", "tassoPresenzeMinime", "codCorso", "codGestore", "numeroLezioni", "Privato") VALUES ('Analisi I', 'Studio di Funzione Derivate Integrali', 5, 100, 'C2      ', 'G1      ', 5, false);INSERT INTO public."Corso" (titolo, descrizione, "iscrizioniMassime", "tassoPresenzeMinime", "codCorso", "codGestore", "numeroLezioni", "Privato") VALUES ('Storia contemporanea', '1945-2000', 6, 100, 'C4      ', 'G3      ', 1, true);INSERT INTO public."Corso" (titolo, descrizione, "iscrizioniMassime", "tassoPresenzeMinime", "codCorso", "codGestore", "numeroLezioni", "Privato") VALUES ('Storia di Napoli', '', 4, 100, 'C5      ', 'G3      ', 1, false);INSERT INTO public."Corso" (titolo, descrizione, "iscrizioniMassime", "tassoPresenzeMinime", "codCorso", "codGestore", "numeroLezioni", "Privato") VALUES ('Algebra', 'Alberi Grafi Reticoli', 4, 100, 'C3      ', 'G1      ', 4, false);INSERT INTO public."Corso" (titolo, descrizione, "iscrizioniMassime", "tassoPresenzeMinime", "codCorso", "codGestore", "numeroLezioni", "Privato") VALUES ('Corso di progettazione CAD 2D', '', 7, 100, 'C6      ', 'G4      ', 3, false);INSERT INTO public."Corso" (titolo, descrizione, "iscrizioniMassime", "tassoPresenzeMinime", "codCorso", "codGestore", "numeroLezioni", "Privato") VALUES ('Grafica Photoshop CC', 'Impara ad usare Photoshop', 5, 100, 'C7      ', 'G4      ', 3, false);INSERT INTO public."Gestore" (nome, descrizione, telefono, "codGestore", email) VALUES ('Academy', 'Gestore di corsi di Formazione\nCon sede a PAVIA', '03823991', 'G0      ', 'info@academy.it');INSERT INTO public."Gestore" (nome, descrizione, telefono, "codGestore", email) VALUES ('easytraining', 'Easy Training gestisce corsi di formazione\na MILANO', '04654747', 'G1      ', 'info@easytraining.it');INSERT INTO public."Gestore" (nome, descrizione, telefono, "codGestore", email) VALUES ('CorsiFormazione', 'Corsi di formazione\nNapoli e provincia', '08765476', 'G3      ', 'info@corsiformazione.it');INSERT INTO public."Gestore" (nome, descrizione, telefono, "codGestore", email) VALUES ('Formarsi Facile', 'Formarsi non Ã¨ mai stato cosÃ¬ facile', '05343345', 'G4      ', 'info@formazionefacile.it');INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C7      ', 'S1      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C2      ', 'S3      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C0      ', 'S0      ', true, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C0      ', 'S2      ', true, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C0      ', 'S4      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C0      ', 'S5      ', true, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C1      ', 'S7      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C1      ', 'S0      ', true, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C1      ', 'S6      ', true, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C3      ', 'S3      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C2      ', 'S8      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C2      ', 'S1      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C2      ', 'S5      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C3      ', 'S8      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C5      ', 'S2      ', true, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C5      ', 'S8      ', true, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C4      ', 'S0      ', false, false);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C2      ', 'S0      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C5      ', 'S6      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C6      ', 'S7      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C5      ', 'S7      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C6      ', 'S0      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C6      ', 'S6      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C6      ', 'S9      ', true, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C7      ', 'S7      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C7      ', 'S9      ', false, true);INSERT INTO public."Iscritti" ("codCorso", "codStudente", "Idoneo", "Richiesta") VALUES ('C7      ', 'S6      ', false, true);INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('3.Lezione Photoshop', 'Nessuna Descrizione', '2022-02-03 12:00:00', '02:00:00', 'L2      ', 'C7      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('prima lezione analisi', 'Nessuna Descrizione', '2022-02-20 12:00:00', '01:00:00', 'L3      ', 'C2      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('seconda lezione di analisi', 'Nessuna Descrizione', '2022-02-22 12:00:00', '01:00:00', 'L4      ', 'C2      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('prima lezione di Object', 'Nessuna Descrizione', '2022-02-22 12:00:00', '01:00:00', 'L5      ', 'C0      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('seconda lezione di Object', 'Nessuna Descrizione', '2022-02-23 12:00:00', '02:00:00', 'L6      ', 'C0      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('terza lezione di Object', 'Nessuna Descrizione', '2022-02-24 16:00:00', '01:00:00', 'L7      ', 'C0      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('prima lezione database', 'Nessuna Descrizione', '2022-02-25 12:00:00', '01:00:00', 'L8      ', 'C1      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('seconda lezione database', 'Nessuna Descrizione', '2022-02-28 11:00:00', '01:00:00', 'L9      ', 'C1      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('terza lezione analisi', 'Nessuna Descrizione', '2022-02-28 12:00:00', '01:00:00', 'L10     ', 'C2      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('prima lezione algebra', 'Nessuna Descrizione', '2022-02-28 12:00:00', '16:00:00', 'L11     ', 'C3      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('quarta lezione analisi', 'Nessuna Descrizione', '2022-03-03 12:00:00', '01:00:00', 'L12     ', 'C2      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('seconda lezione Algebra', 'Nessuna Descrizione', '2022-03-01 12:00:00', '01:00:00', 'L13     ', 'C3      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('storia di napoli', 'unica lezione', '2022-03-01 11:00:00', '01:00:00', 'L14     ', 'C5      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('prima lezione grafica', 'Nessuna Descrizione', '2022-02-25 12:00:00', '01:00:00', 'L15     ', 'C6      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('seconda lezione grafica', 'Nessuna Descrizione', '2022-02-25 12:00:00', '01:00:00', 'L16     ', 'C6      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('terza lezione grafica', 'Nessuna Descrizione', '2022-03-04 12:00:00', '01:00:00', 'L17     ', 'C6      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('1.Lezione Photoshop', 'Nessuna Descrizione', '2022-03-09 12:00:00', '02:00:00', 'L0      ', 'C7      ');INSERT INTO public."Lezione" (titolo, descrizione, "dataoraInizio", durata, "codLezione", "codCorso") VALUES ('2.Lezione Photoshop', 'Nessuna Descrizione', '2022-03-09 15:00:00', '01:00:00', 'L1      ', 'C7      ');                                                                                                                                                                 INSERT INTO public."Operatore" ("codOperatore", "codiceFiscale") VALUES ('O0', 'mariorossi');INSERT INTO public."Operatore" ("codOperatore", "codiceFiscale") VALUES ('O1', 'riccardoesposito');INSERT INTO public."Operatore" ("codOperatore", "codiceFiscale") VALUES ('O2', 'raffeleamendola');INSERT INTO public."Operatore" ("codOperatore", "codiceFiscale") VALUES ('O3', 'ludovicamarchett');INSERT INTO public."Operatore" ("codOperatore", "codiceFiscale") VALUES ('O5', 'massimocapponera');INSERT INTO public."Operatore" ("codOperatore", "codiceFiscale") VALUES ('O4', 'salvatorelongoba');                                                                                                                                                                       INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L14     ', 'S2      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L14     ', 'S8      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L4      ', 'S0      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L10     ', 'S0      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L12     ', 'S0      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L17     ', 'S0      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L6      ', 'S0      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L5      ', 'S0      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L6      ', 'S5      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L14     ', 'S6      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L5      ', 'S2      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L7      ', 'S5      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L6      ', 'S2      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L7      ', 'S4      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L9      ', 'S7      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L6      ', 'S4      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L14     ', 'S7      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L16     ', 'S7      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L17     ', 'S7      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L5      ', 'S5      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L9      ', 'S0      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L8      ', 'S7      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L8      ', 'S0      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L9      ', 'S6      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L8      ', 'S6      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L15     ', 'S6      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L15     ', 'S0      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L15     ', 'S9      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L16     ', 'S6      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L16     ', 'S9      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L17     ', 'S9      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L0      ', 'S7      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L1      ', 'S9      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L1      ', 'S7      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L0      ', 'S9      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L0      ', 'S6      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L7      ', 'S0      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L10     ', 'S1      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L10     ', 'S8      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L12     ', 'S8      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L13     ', 'S8      ', false);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L4      ', 'S5      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L4      ', 'S1      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L4      ', 'S8      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L10     ', 'S5      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L12     ', 'S1      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L12     ', 'S5      ', true);INSERT INTO public."Prenotazioni" ("codLezione", "codStudente", "Presente") VALUES ('L11     ', 'S8      ', true);                                                                                                                                                                      INSERT INTO public."Sede" ("cittÃ ", via, civico, provincia, "codGestore") VALUES ('PAVIA', 'inventata', '32', 'PAVIA', 'G0      ');INSERT INTO public."Sede" ("cittÃ ", via, civico, provincia, "codGestore") VALUES ('MILANO', 'inventata', '16', 'MILANO', 'G1      ');INSERT INTO public."Sede" ("cittÃ ", via, civico, provincia, "codGestore") VALUES ('NAPOLI', 'inventata', '21', 'NAPOLI', 'G3      ');INSERT INTO public."Sede" ("cittÃ ", via, civico, provincia, "codGestore") VALUES ('FIRENZE', 'inventata', '12', 'FIRENZE', 'G4      ');                                                                                                                                                                   INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (0, 0, 0, 0, 'C4      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (0, 0, 0, 0, 'C4      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (1, 3, 2, 100, 'C2      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (1, 3, 2, 100, 'C2      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (2, 3, 2.3333333, 50, 'C0      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (2, 3, 2.5, 100, 'C7      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (2, 3, 2.5, 100, 'C7      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (1, 2, 1.5, 100, 'C1      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (2, 3, 2.3333333, 50, 'C0      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (1, 2, 1.5, 100, 'C1      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (2, 2, 2, 100, 'C5      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (2, 2, 2, 100, 'C5      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (1, 3, 2, 100, 'C6      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (1, 3, 2, 100, 'C6      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (0, 1, 0.5, 50, 'C3      ');INSERT INTO public."Statistiche" ("presenzeMinime", "presenzeMassime", "presenzeMedie", "percentualeRempimento", "codCorso") VALUES (0, 1, 0.5, 50, 'C3      ');                                                                                                                                                                   INSERT INTO public."Studente" ("codStudente", "codiceFiscale") VALUES ('S0', 'salvatorelongoba');INSERT INTO public."Studente" ("codStudente", "codiceFiscale") VALUES ('S2', 'ludovicamarchett');INSERT INTO public."Studente" ("codStudente", "codiceFiscale") VALUES ('S3', 'mariorossi');INSERT INTO public."Studente" ("codStudente", "codiceFiscale") VALUES ('S4', 'riccardoesposito');INSERT INTO public."Studente" ("codStudente", "codiceFiscale") VALUES ('S5', 'salvatorearanzul');INSERT INTO public."Studente" ("codStudente", "codiceFiscale") VALUES ('S6', 'robertobarbato');INSERT INTO public."Studente" ("codStudente", "codiceFiscale") VALUES ('S7', 'elenagraziani');INSERT INTO public."Studente" ("codStudente", "codiceFiscale") VALUES ('S1', 'massimocapponera');INSERT INTO public."Studente" ("codStudente", "codiceFiscale") VALUES ('S8', 'raffeleamendola');INSERT INTO public."Studente" ("codStudente", "codiceFiscale") VALUES ('S9', 'virginiasomma');                                                                                                                                                                        INSERT INTO public."Utente" (email, nome, cognome, "dataNascita", "comunediNascita", sesso, "codiceFiscale") VALUES ('mariorossi@gmail.com', 'Mario', 'Rossi', '1998-04-10', 'GENOVA', 'M', 'mariorossi');INSERT INTO public."Utente" (email, nome, cognome, "dataNascita", "comunediNascita", sesso, "codiceFiscale") VALUES ('riccardo.esposito@hotmail.com', 'Riccardo', 'Esposito', '1984-01-30', 'MILANO', 'M', 'riccardoesposito');INSERT INTO public."Utente" (email, nome, cognome, "dataNascita", "comunediNascita", sesso, "codiceFiscale") VALUES ('salvatore_aranzulla@gmail.com', 'Salvatore', 'Aranzulla', '1997-03-12', 'FIRENZE', 'M', 'salvatorearanzul');INSERT INTO public."Utente" (email, nome, cognome, "dataNascita", "comunediNascita", sesso, "codiceFiscale") VALUES ('massimo.capponera@hotmail.com', 'Massimo', 'Capponera', '1996-01-18', 'PALERMO', 'M', 'massimocapponera');INSERT INTO public."Utente" (email, nome, cognome, "dataNascita", "comunediNascita", sesso, "codiceFiscale") VALUES ('raffaele.amendola@gmail.com', 'Raffaele', 'Amendola', '1977-05-24', 'ALESSANDRIA', 'M', 'raffeleamendola');INSERT INTO public."Utente" (email, nome, cognome, "dataNascita", "comunediNascita", sesso, "codiceFiscale") VALUES ('ludovica_marchetti@libero.it', 'Ludovica', 'Marchetti', '1988-07-12', 'COMO', 'F', 'ludovicamarchett');INSERT INTO public."Utente" (email, nome, cognome, "dataNascita", "comunediNascita", sesso, "codiceFiscale") VALUES ('graziani.elena@libero.it', 'Elena', 'Graziani', '1991-09-29', 'PAVIA', 'F', 'elenagraziani');INSERT INTO public."Utente" (email, nome, cognome, "dataNascita", "comunediNascita", sesso, "codiceFiscale") VALUES ('robertobarbato@hotmail.com', 'Roberto', 'Barbato', '1993-10-10', 'BRINDISI', 'M', 'robertobarbato');INSERT INTO public."Utente" (email, nome, cognome, "dataNascita", "comunediNascita", sesso, "codiceFiscale") VALUES ('virginia.somma@gmail.com', 'Virginia', 'Somma', '1989-12-01', 'NAPOLI', 'F', 'virginiasomma');INSERT INTO public."Utente" (email, nome, cognome, "dataNascita", "comunediNascita", sesso, "codiceFiscale") VALUES ('salvatore.longobardi@gmail.com', 'Salvatore', 'Longobardi', '1996-11-12', 'SALERNO', 'M', 'salvatorelongoba'); 