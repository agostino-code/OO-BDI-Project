@startuml
skinparam dpi 300
class com.unina.project.Utente {
- String email
- String nome
- String cognome
+ LocalDate dataNascita
+ String sesso
+ String comuneDiNascita
+ String codiceFiscale
+ String getNome()
+ void setNome(String)
+ String getCognome()
+ void setCognome(String)
+ void setDataNascita(LocalDate)
+ String getSesso()
+ void setSesso(String)
+ String getCodiceFiscale()
+ void setCodiceFiscale(String)
+ String getComuneDiNascita()
+ void setComuneDiNascita(String)
+ void setEmail(String)
+ String getEmail()
+ LocalDate getDataNascita()
+ int getDataNascitaGiorno()
+ int getDataNascitaMese()
+ int getDataNascitaAnno()
}

class com.unina.project.database.postgre.PostgreCorsoDAO {
- JDBC postgreJDBC
+ String insertCorso(Corso,String)
+ List<Corso> getCorsi(String)
+ List<Corso> getCorsoList(String,String)
+ void deleteCorso(Corso)
+ List<CorsoRicerca> ricercaCorsi(String)
+ void updateCorso(Corso)
+ List<AreaTematica> getAreeTematiche(String)
+ Integer numeroIscrittiCorso(String)
+ List<Corso> getCorsiOperatore(String)
+ List<Corso> getCorsiOperatoreAccettati(String)
+ List<Corso> getCorsiStudente(String)
+ void disiscrivitiCorso(String,String)
+ Integer getNumeroLezioni(String)
}

class com.unina.project.Main {
+ void start(Stage)
+ {static} void main(String[])
}
class com.unina.project.controller.profile.ProfileController {
+ AnchorPane operatoreAnchorPane
- Button gestioneCorsiButton
- Button gestorelezioneButton
- Button richiesteButton
- StackPane stackPanelProfilo
- Stage loginStage
+ Autenticazione autenticazione
+ Utente utente
- UtenteDAO utenteDAO
- OperatoreDAO operatoreDAO
~ void onDatiAnagraficiButtonClick()
~ void onDatiAutenticazioneButtonClick()
~ void onIscrizioneCorsiButtonClick()
~ void onLogoutButtonClick(ActionEvent)
~ void oniscrizioniLezioniButtonClick()
+ void setHomepage()
+ void setProfile(Stage,String,String)
+ void onGestioneCorsiButtonClick()
+ void onGestioneLezioniButtonClick()
+ void onRichiesteButtonClick()
}
class com.unina.project.controller.ProfileGestoreController {
+ Button nuovoCorsoButton
+ TreeTableView<Corso> corsiTableView
+ TreeTableColumn<Corso,String> codCorsoTableColumn
+ TreeTableColumn<Corso,String> titoloTableColumn
+ TreeTableColumn<Corso,String> descrizioneTableColumn
+ TreeTableColumn<Corso,Integer> iscrizionimassimeTableColumn
+ TreeTableColumn<Corso,Integer> numerolezioniTableColumn
+ TreeTableColumn<Corso,String> tassopresenzeminimeTableColumn
+ TreeTableColumn<Corso,String> privatoTableColumn
+ TreeTableColumn<Corso,String> areeTableColumn
- MenuBar gestoreMenuBar
+ Menu nomeGestoreMenu
+ TableView<Studente> studentiTableView
+ TableColumn<Studente,String> nomeTableColumn
+ TableColumn<Studente,String> cognomeTableColumn
+ TableColumn<Studente,String> emailTableColumn
+ TableColumn<Studente,String> codStudenteTableColumn
+ TableColumn<Studente,String> sessoTableColumn
+ TableColumn<Studente,LocalDate> datadiNascitaTableColumn
+ TableColumn<Studente,String> idoneoTableColumn
- TableView<Operatore> operatoriTableView
+ TableColumn<Operatore,String> emailoperatoreTableColumn
+ TableColumn<Operatore,String> nomeoperatoreTableColumn
+ TableColumn<Operatore,String> cognomeoperatoreTableColumn
+ TableColumn<Operatore,String> codoperatoreTableColumn
+ TableColumn<Operatore,String> richiestaTableColumn
- ObservableList<Studente> listStudenti
- ObservableList<Operatore> listOperatori
- Corso rowData
- Operatore rowDataOperatore
- StudenteDAO studenteDAO
- Autenticazione autenticazione
- AutenticazioneDAO autenticazioneDAO
+ Gestore gestore
- GestoreDAO gestoreDAO
+ AreaTematicaDAO areaTematicaDAO
+ Corso corso
+ CorsoDAO corsoDAO
- OperatoreDAO operatoreDAO
- Operatore operatore
- UtenteDAO utenteDAO
- Stage loginStage
+ void initialize(URL,ResourceBundle)
+ void setCorsiTableView()
+ void setOperatoriTableView()
+ void setStudentiTableView()
+ void updateStudentiTableView(String)
- void eliminaOperatore(String,String)
- void visualizzaStatistiche(Corso)
- void styleRowColor()
+ void eliminaCorso(Corso)
+ void aggiungiOperatore(Corso)
+ void modificaCorso(Corso)
+ void updateCorsiTableView()
+ void updateOperatoriTableView(String)
+ void setProfileGestore(Stage,String,String)
+ void oncloseButtonMenuClick()
- void oneliminaGestoreButtonMenuClick()
- void eliminaGestore()
+ void onNuovoCorsoButton()
}

class com.unina.project.controller.profile.IscrizioneLezioniController {
+ TreeTableView<Lezione> lezioniTableView
+ TreeTableColumn<Lezione,String> codCorsoTableColumn
+ TreeTableColumn<Lezione,String> titoloTableColumn
+ TreeTableColumn<Lezione,String> descrizioneTableColumn
+ TreeTableColumn<Lezione,LocalDate> dataTableColumn
+ TreeTableColumn<Lezione,LocalTime> oraTableColumn
+ TreeTableColumn<Lezione,LocalTime> durataTableColumn
+ TreeTableColumn<Lezione,String> codLezioneTableColumn
- Lezione rowDataLezione
- Studente studente
- LezioneDAO lezioneDAO
- StudenteDAO studenteDAO
- CorsoDAO corsoDAO
+ void initialize(URL,ResourceBundle)
+ void setLezioniTableView()
+ void updateLezioniTableView()
- void styleRowColor()
+ void setDatiUtente(Utente)
}
class com.unina.project.controller.profile.RichiesteController {
+ TableView<Studente> richiestecorsiTableView
+ TableColumn<Studente,String> nomeTableColumn
+ TableColumn<Studente,String> cognomeTableColumn
+ TableColumn<Studente,String> emailTableColumn
+ TableColumn<Studente,String> codStudenteTableColumn
+ TableColumn<Studente,String> sessoTableColumn
+ TableColumn<Studente,LocalDate> datadiNascitaTableColumn
+ TreeTableView<Corso> corsiTableView
+ TreeTableColumn<Corso,String> codCorsoTableColumn
+ TreeTableColumn<Corso,String> titoloTableColumn
+ TreeTableColumn<Corso,String> descrizioneTableColumn
+ TreeTableColumn<Corso,Integer> iscrizionimassimeTableColumn
+ TreeTableColumn<Corso,Integer> numerolezioniTableColumn
+ TreeTableColumn<Corso,String> tassopresenzeminimeTableColumn
+ TreeTableColumn<Corso,String> areeTableColumn
- Corso rowDataCorso
- Studente rowDataStudente
- StudenteDAO studenteDAO
- Operatore operatore
- OperatoreDAO operatoreDAO
- CorsoDAO corsoDAO
- ObservableList<Studente> listStudentiDaAccettare
+ void initialize(URL,ResourceBundle)
+ void accettaRichiesta(Studente,Corso)
+ void eliminaRichiesta(Studente,Corso)
+ void setCorsiTableView()
+ void setRichiesteTableView()
+ void updateCorsiTableView()
+ void updateRichiesteTableView(String)
+ void setDatiUtente(Utente)
}
class com.unina.project.controller.profile.CorsoRicerca {
+ String codGestore
+ String descrizione
+ String titolo
+ String codCorso
+ String nome
+ String citta
+ String provincia
+ String telefono
+ Integer iscrizioniMassime
+ Integer numeroLezioni
+ Integer tassoPresenzeMinime
+ Boolean Privato
+ String tag
+ List<AreaTematica> areetematiche
+ void setCodGestore(String)
+ void setDescrizione(String)
+ void setTitolo(String)
+ void setCodCorso(String)
+ void setNome(String)
+ void setCitta(String)
+ void setProvincia(String)
+ void setAreetematiche(List<AreaTematica>)
+ void setTelefono(String)
+ void setIscrizioniMassime(Integer)
+ void setNumeroLezioni(Integer)
+ void setTassoPresenzeMinime(Integer)
+ String getPrivato()
+ void setPrivato(Boolean)
+ void setTag(String)
}
interface com.unina.project.database.GestoreDAO {
~ String insertGestore(Gestore)
~ boolean checkNomeExist(String)
~ Gestore getGestore(String)
}

class com.unina.project.controller.profile.StatisticheController {
+ CategoryAxis xAxis
+ NumberAxis yAxis
+ LineChart<String,Number> statisticheLineChart
+ BarChart<String,Number> statisticheBarChart
+ PieChart statistichePieChart
- Corso corso
- Statistiche statistiche
- StatisticheDAO statisticheDAO
+ void setStatistiche(Corso)
- void setStatisticheLezioni()
- void setStatisticheLezioniSingole()
- void setStatisticheRiempimento()
}
class com.unina.project.database.postgre.PostgreJDBC {
+ Connection Connessione()
}
class com.unina.project.Statistiche {
- Integer percentualeRiempimento
- Integer presenzeMinime
- Integer presenzeMassime
- Float presenzeMedie
+ Integer getPercentualeRiempimento()
+ void setPercentualeRiempimento(Integer)
+ Integer getPresenzeMinime()
+ void setPresenzeMinime(Integer)
+ Integer getPresenzeMassime()
+ void setPresenzeMassime(Integer)
+ Float getPresenzeMedie()
+ void setPresenzeMedie(Float)
}
class com.unina.project.controller.RegistrazioneGestoreController {
+ Button registratigestoreButton
+ TextArea descrizionegestoreTextArea
+ TextField telefonoTextField
+ TextField indirizzoTextField
+ TextField nomeTextField
+ Sede sede
- Gestore gestore
- AutenticazioneDAO autenticazioneDAO
- GestoreDAO gestoreDAO
- SedeDAO sedeDAO
- ChangeListener<Boolean> nomeListner
- ChangeListener<Boolean> descrizioneLister
+ void initialize(URL,ResourceBundle)
+ void getinserisciScene()
+ void checkDescrizioneLenght()
+ void oninviasottoscrizioneButtonClick(ActionEvent)
}
class com.unina.project.controller.CorsoController {
+ TextArea descrizionecorsoTextArea
+ TextField iscrizioniMassimeTextField
+ TextField lezioniTextField
+ TextField lezioniMinimeTextField
+ Button nuovoCorsoButton
+ TextField tassoMinimoTextField
+ TextField titoloTextField
+ ChoiceBox<String> tipocorsoChoiseBox
+ HBox tagshbox
+ TagBar tagBar
+ List<String> areeTematiche
- ChangeListener<Boolean> descrizioneLister
- ChangeListener<Boolean> lezioniMinimeListner
+ void initialize(URL,ResourceBundle)
+ void checkDescrizioneLenght()
+ void setcodGestore(String)
+ void onnuovoCorsoButtonClick()
}
interface com.unina.project.database.OperatoreDAO {
~ String setOperatore(String)
~ void associaOperatore(String,String)
~ List<Operatore> getOperatori(String)
~ boolean checkOperatoreExist(String)
~ String getCodOperatore(String)
~ boolean checkOperatoreDaAccettare(String,String)
~ void annullaGestioneCorso(String,String)
~ void accettaGestioneCorso(String,String)
~ boolean checkOperatoreCorso(String,String)
}

class com.unina.project.database.postgre.PostgreUtenteDAO {
- JDBC postgreJDBC
+ void insertUtente(Utente)
+ Utente getUtente(String)
}

class com.unina.project.verificationcode.SendVerificationEmail {
+ String SendEmail(String)
}

class com.unina.project.database.postgre.PostgreStatisticheDAO {
- JDBC postgreJDBC
+ Statistiche getStatistiche(String)
+ List<PresenzeLezioni> getPresenzeLezioni(String)
}
class com.unina.project.Corso {
- String titolo
- String descrizione
- Integer iscrizioniMassime
- Integer numeroLezioni
+ Integer tassoPresenzeMinime
- String codCorso
+ Boolean Privato
- List<Operatore> operatori
- List<AreaTematica> areetematiche
+ String tag
+ void setTitolo(String)
+ void setDescrizione(String)
+ void setIscrizioniMassime(Integer)
+ void setTassoPresenzeMinime(Integer)
+ void setNumeroLezioni(Integer)
+ String getTitolo()
+ String getDescrizione()
+ Integer getIscrizioniMassime()
+ Integer getNumeroLezioni()
+ String getCodCorso()
+ List<Operatore> getOperatori()
+ List<AreaTematica> getAreetematiche()
+ String getTag()
+ String getTassoPresenzeMinime()
+ void setCodCorso(String)
+ void setPrivato(Boolean)
+ String getPrivato()
+ void setOperatori(List<Operatore>)
+ void setAreetematiche(List<AreaTematica>)
+ void setTag(String)
}
class com.unina.project.controller.profile.RicercaCorsoController {
- Button cercaCorsoButton
- TextField codGestoreTextField
- TextField codcorsoTextField
- TextField cittaTextField
- TextField nomeTextField
- HBox tagshbox
- TextField provinciaTextField
- ChoiceBox<String> tipocorsoChoiseBox
- TextField titoloTextField
+ TagBar tagBar
~ String SQL
+ void initialize(URL,ResourceBundle)
~ void onCercaCorsoButtonClick(ActionEvent)
+ String getParametriRicercaSQL()
+ List<String> getTagsRicerca()
}
interface com.unina.project.database.CorsoDAO {
~ String insertCorso(Corso,String)
~ List<Corso> getCorsi(String)
~ void deleteCorso(Corso)
~ List<CorsoRicerca> ricercaCorsi(String)
~ void updateCorso(Corso)
~ List<AreaTematica> getAreeTematiche(String)
~ Integer numeroIscrittiCorso(String)
~ List<Corso> getCorsiOperatore(String)
~ List<Corso> getCorsiOperatoreAccettati(String)
~ List<Corso> getCorsiStudente(String)
~ void disiscrivitiCorso(String,String)
~ Integer getNumeroLezioni(String)
}
class com.unina.project.controller.profile.GestioneCorsiController {
+ TableView<Studente> studentiTableView
+ TableColumn<Studente,String> nomeTableColumn
+ TableColumn<Studente,String> cognomeTableColumn
+ TableColumn<Studente,String> emailTableColumn
+ TableColumn<Studente,String> codStudenteTableColumn
+ TableColumn<Studente,String> sessoTableColumn
+ TableColumn<Studente,LocalDate> datadiNascitaTableColumn
+ TableColumn<Studente,String> idoneoTableColumn
+ TreeTableView<Corso> corsiTableView
+ TreeTableColumn<Corso,String> codCorsoTableColumn
+ TreeTableColumn<Corso,String> titoloTableColumn
+ TreeTableColumn<Corso,String> descrizioneTableColumn
+ TreeTableColumn<Corso,Integer> iscrizionimassimeTableColumn
+ TreeTableColumn<Corso,Integer> numerolezioniTableColumn
+ TreeTableColumn<Corso,String> tassopresenzeminimeTableColumn
+ TreeTableColumn<Corso,String> areeTableColumn
+ TreeTableColumn<Corso,String> privatoTableColumn
- Corso rowDataCorso
- Studente rowDataStudente
- StudenteDAO studenteDAO
- Operatore operatore
- OperatoreDAO operatoreDAO
- CorsoDAO corsoDAO
- ObservableList<Studente> listStudenti
+ void initialize(URL,ResourceBundle)
+ void eliminaStudente(Corso)
+ void accettaRichiesta(String,Corso)
+ void eliminaRichiesta(String,Corso)
- void eliminaOperatore(String,Corso)
- void visualizzaStatistiche(Corso)
+ void setCorsiTableView()
+ void setStudentiTableView()
+ void updateCorsiTableView()
- void styleRowColor()
+ void updateStudentiTableView(String)
+ void setDatiUtente(Utente)
}
class com.unina.project.controller.profile.LezioneController {
+ TextField oraTextField
+ TextField codCorsoTextField
+ DatePicker dataPicker
+ TextArea descrizioneTextArea
+ TextField durataTextField
+ Button nuovaLezioneButton
+ TextField titoloTextField
+ Lezione lezione
+ LezioneDAO lezioneDAO
- CorsoDAO corsoDAO
- ChangeListener<Boolean> descrizioneLister
+ ChangeListener<Boolean> oraListner
+ ChangeListener<Boolean> durataListner
+ void initialize(URL,ResourceBundle)
+ void checkDescrizioneLenght()
+ void setcodCorso(String)
- void restrictDatePicker(DatePicker,LocalDate,LocalDate)
+ void onnuovaLezioneButtonClick(ActionEvent)
}
class com.unina.project.AreaTematica {
- String tag
+ void setTag(String)
+ String getTag()
}
class com.unina.project.database.postgre.PostgreLezioneDAO {
- JDBC postgreJDBC
+ List<Lezione> getLezioni(String)
+ String getCorsoLezione(String)
+ List<Studente> getStudentiPrenotati(String)
+ void insertLezione(Lezione)
+ void updateLezione(Lezione)
+ void deleteLezione(String)
+ void prenotaLezione(String,String)
+ void deletePrenotazioneLezione(String,String)
+ void confermapresenza(String,String)
+ void nonpresente(String,String)
+ List<Lezione> getLezioniPrenotate(String)
+ boolean checkStudenteIscrittoLezione(String,String)
+ Integer countNumeroLezioni(String)
}
class com.unina.project.Sede {
- String via
- String civico
- String citta
- String provincia
+ void setVia(String)
+ void setCivico(String)
+ void setCitta(String)
+ void setProvincia(String)
+ String getVia()
+ String getCivico()
+ String getCitta()
+ String getProvincia()
+ String getIndirizzo()
}
class com.unina.project.database.postgre.PostgreOperatoreDAO {
- JDBC postgreJDBC
+ String setOperatore(String)
+ void associaOperatore(String,String)
+ List<Operatore> getOperatori(String)
+ boolean checkOperatoreExist(String)
+ String getCodOperatore(String)
+ boolean checkOperatoreDaAccettare(String,String)
+ void annullaGestioneCorso(String,String)
+ void accettaGestioneCorso(String,String)
+ boolean checkOperatoreCorso(String,String)
}
class com.unina.project.database.postgre.PostgreSedeDAO {
- JDBC postgreJDBC
+ void insertSede(Sede,String)
}
class com.unina.project.Operatore {
- String codOperatore
- List<Corso> corsi
- Boolean Richiesta
+ void setCodOperatore(String)
+ String getCodOperatore()
+ List<Corso> getCorsi()
+ void setCorsi(List<Corso>)
+ void setRichiesta(Boolean)
+ String getRichiesta()
}
class com.unina.project.controller.profile.IscrizioneCorsoController {
- TreeTableView<CorsoRicerca> ricercacorsiTableView
+ TreeTableColumn<CorsoRicerca,String> codiceCorsoTableColumn
+ TreeTableColumn<CorsoRicerca,String> titoloTableColumn
+ TreeTableColumn<CorsoRicerca,String> descrizioneTableColumn
+ TreeTableColumn<CorsoRicerca,String> codiceGestoreTableColumn
+ TreeTableColumn<CorsoRicerca,String> nomeGestoreTableColumn
+ TreeTableColumn<CorsoRicerca,String> cittaGestoreTableColumn
+ TreeTableColumn<CorsoRicerca,String> provinciaGestoreTableColumn
+ TreeTableColumn<CorsoRicerca,String> areeTableColumn
+ TreeTableColumn<CorsoRicerca,String> tipoTableColumn
+ TreeTableColumn<CorsoRicerca,String> telefonoGestoreTableColumn
- Utente utente
- CorsoRicerca rowData
- CorsoDAO corsoDAO
- Studente studente
- StudenteDAO studenteDAO
- OperatoreDAO operatoreDAO
+ void initialize(URL,ResourceBundle)
- void iscrizioneCorso(CorsoRicerca)
- void dettagliCorso(CorsoRicerca)
- void setCorsoRicercaTableView()
+ void setDefaultRicercaTableView()
+ void setRicercaTableView(String,List<String>)
~ void onCercaCorsoButtonClick(ActionEvent)
+ void setDatiUtente(Utente)
}
class com.unina.project.controller.profile.LezioneModificaController {
+ void onnuovaLezioneButtonClick(ActionEvent)
+ void setLezione(Lezione)
}
class com.unina.project.database.postgre.PostgreGestoreDAO {
- JDBC postgreJDBC
+ String insertGestore(Gestore)
+ boolean checkNomeExist(String)
+ Gestore getGestore(String)
}
class com.unina.project.controller.LoginController {
+ Button loginButton
+ TextField emailTextField
+ TextField passwordTextField
+ ProgressBar loginProgressBar
+ TextField gestoriemailTextField
+ PasswordField gestoriPasswordField
- Label passwordDimenticataLabel
- AutenticazioneDAO autenticazioneDAO
- JMetro jMetro
- ChangeListener<Boolean> checkEmailListner
- ChangeListener<Boolean> checkEmailGestoriListner
+ void initialize(URL,ResourceBundle)
+ void openRegistrazioneScene(ActionEvent)
+ void openProfileScene(ActionEvent)
+ void openRegistrazioneGestoriScene(ActionEvent)
+ void openProfileGestoriScene(ActionEvent)
- void loadProfile(ActionEvent,FXMLLoader,String)
- void checkLoginFail()
+ void passwordDimenticata(MouseEvent)
}
interface com.unina.project.database.StatisticheDAO {
~ Statistiche getStatistiche(String)
~ List<PresenzeLezioni> getPresenzeLezioni(String)
}
class com.unina.project.database.postgre.PostgreAutenticazioneDAO {
- JDBC postgreJDBC
+ void insertAutenticazione(Autenticazione)
+ boolean checkEmailExist(String)
+ boolean checkEmailUtenteExist(String)
+ boolean checkEmailGestoriExist(String)
+ boolean loginUtente(String,String)
+ boolean loginGestore(String,String)
+ void deleteAutenticazione(Autenticazione)
+ void resetPassword(String,String)
+ void updateAutenticazione(String,String,String)
}

class com.unina.project.Gestore {
- String nome
- String descrizione
- String telefono
- String email
+ String codGestore
+ List<Corso> corsi
+ void setNome(String)
+ void setDescrizione(String)
+ void setTelefono(String)
+ void setEmail(String)
+ String getNome()
+ String getDescrizione()
+ String getTelefono()
+ String getEmail()
+ String getCodGestore()
+ List<Corso> getCorsi()
+ void setCodGestore(String)
+ void setCorsi(List<Corso>)
}
class com.unina.project.controller.profile.DatiProfileController {
- TextField CodiceFiscaleTextField
- TextField CognomeTextField
- TextField ComuneNascitaTextField
- TextField DataNascitaTextField
- TextField NomeTextField
- TextField emailTextField
- PasswordField passwordField
- TextField passwordTextField
- Autenticazione autenticazione
- AutenticazioneDAO autenticazioneDAO
+ void setDatiAutenticazione(Autenticazione)
+ void setDatiUtente(Utente)
~ void onViewMousePressed()
~ void onViewMouseRelased()
+ void onModificaDatiButtonClick(ActionEvent)
+ void onEliminaAccountButtonClick()
- void eliminaUtente()
}
class com.unina.project.controller.profile.GestioneLezioniController {
+ TableView<Studente> studentiTableView
+ TableColumn<Studente,String> nomeTableColumn
+ TableColumn<Studente,String> cognomeTableColumn
+ TableColumn<Studente,String> emailTableColumn
+ TableColumn<Studente,String> codStudenteTableColumn
+ TableColumn<Studente,String> sessoTableColumn
+ TableColumn<Studente,LocalDate> datadiNascitaTableColumn
+ TableColumn<Studente,String> presenteTableColumn
+ TreeTableView<Lezione> lezioniTableView
+ TreeTableColumn<Lezione,String> codCorsoTableColumn
+ TreeTableColumn<Lezione,String> titoloTableColumn
+ TreeTableColumn<Lezione,String> descrizioneTableColumn
+ TreeTableColumn<Lezione,LocalDate> dataTableColumn
+ TreeTableColumn<Lezione,LocalTime> oraTableColumn
+ TreeTableColumn<Lezione,LocalTime> durataTableColumn
+ TreeTableColumn<Lezione,String> codLezioneTableColumn
- Lezione rowDataLezione
- Studente rowDataStudente
- LezioneDAO lezioneDAO
- Operatore operatore
- OperatoreDAO operatoreDAO
- CorsoDAO corsoDAO
- ObservableList<Studente> listStudenti
+ void initialize(URL,ResourceBundle)
+ void setLezioniTableView()
+ void setStudentiTableView()
+ void nuovalezione(String)
+ void modificaLezione(Lezione)
+ void eliminaLezione(Lezione)
+ void updateLezioniTableView()
- void styleRowColor()
+ void updateStudentiTableView(String)
+ void setDatiUtente(Utente)
}

class com.unina.project.database.postgre.PostgreAreaTematicaDAO {
- JDBC postgreJDBC
+ void insertAreaTematica(List<String>)
+ void associaAreaTematica(List<String>,String)
+ List<AreaTematica> getAreeTematiche()
+ void deleteAreaTematica(Corso)
}
class com.unina.project.controller.IndirizzoController {
+ Button inserisciButton
- TextField viaTextField
- TextField civicoTextField
- TextField cittaTextField
- TextField provinciaTextField
- TextField siglaTextField
- List<String> comuni
- List<String> province
+ ChangeListener<Boolean> provinciaListner
+ void initialize(URL,ResourceBundle)
+ void getProvince(List<String>)
+ String getProvinceSigle(String)
+ void oninserisciButtonClick(ActionEvent)
+ Sede getSede()
}
class com.unina.project.controller.ModificaDatiAutenticazioneController {
- Button confermaModificaButton
- PasswordField confermaPasswordField
- TextField emailTextField
- PasswordField passwordField
- AutenticazioneDAO autenticazioneDAO
- UtenteDAO utenteDAO
- Autenticazione autenticazione
+ ChangeListener<Boolean> passwordListner
+ void setAutenticazione(Autenticazione)
+ String nomeUtente(String)
- double calcolaPasswordStrength(String,String)
~ void confermaModifica()
+ void initialize(URL,ResourceBundle)
}
interface com.unina.project.database.JDBC {
~ Connection Connessione()
}
class com.unina.project.controller.profile.PresenzeLezioni {
- String codLezione
- Integer numero_presenze
+ String getCodLezione()
+ void setCodLezione(String)
+ Integer getNumero_presenze()
+ void setNumero_presenze(Integer)
}

interface com.unina.project.database.StudenteDAO {
~ String setStudente(String)
~ boolean checkStudenteExist(String)
~ void iscriviStudente(String,String)
~ List<Studente> getStudentiDaAccettare(String)
~ List<Studente> getStudentiAccettati(String)
~ String getCodStudente(String)
~ void richiestaAccettata(String,String)
~ void richiestaRifiutata(String,String)
~ boolean checkStudenteIscritto(String,String)
~ Boolean getStudenteIdoneo(String)
}
interface com.unina.project.database.AutenticazioneDAO {
~ void insertAutenticazione(Autenticazione)
~ boolean checkEmailExist(String)
~ boolean checkEmailUtenteExist(String)
~ boolean checkEmailGestoriExist(String)
~ boolean loginUtente(String,String)
~ boolean loginGestore(String,String)
~ void resetPassword(String,String)
~ void deleteAutenticazione(Autenticazione)
~ void updateAutenticazione(String,String,String)
}
class com.unina.project.controller.ResettaPasswordController {
- PasswordField passwordField
- PasswordField confermapasswordField
- Autenticazione autenticazione
- UtenteDAO utenteDAO
- AutenticazioneDAO autenticazioneDAO
+ ChangeListener<Boolean> passwordListner
+ void setEmail(String)
+ String nomeUtente(String)
- double calcolaPasswordStrength(String,String)
~ void onConfermaButtonClick(ActionEvent)
+ void initialize(URL,ResourceBundle)
}
interface com.unina.project.database.AreaTematicaDAO {
~ void insertAreaTematica(List<String>)
~ void associaAreaTematica(List<String>,String)
~ List<AreaTematica> getAreeTematiche()
~ void deleteAreaTematica(Corso)
}
class com.unina.project.controller.profile.HomepageController {
+ TreeTableView<CorsoIdoneo> corsiTableView
+ TreeTableColumn<CorsoIdoneo,String> codCorsoTableColumn
+ TreeTableColumn<CorsoIdoneo,String> titoloTableColumn
+ TreeTableColumn<CorsoIdoneo,String> descrizioneTableColumn
+ TreeTableColumn<CorsoIdoneo,String> idoneoTableColumn
+ TreeTableColumn<CorsoIdoneo,Integer> numerolezioniTableColumn
+ TreeTableColumn<CorsoIdoneo,String> tassopresenzeminimeTableColumn
+ TreeTableColumn<CorsoIdoneo,String> privatoTableColumn
+ TreeTableColumn<CorsoIdoneo,String> areeTableColumn
+ TableView<Lezione> lezioniTableView
+ TableColumn<Lezione,String> codCorsoLezioneTableColumn
+ TableColumn<Lezione,String> titoloLezioneTableColumn
+ TableColumn<Lezione,String> descrizioneLezioneTableColumn
+ TableColumn<Lezione,LocalDate> dataTableColumn
+ TableColumn<Lezione,LocalTime> oraTableColumn
+ TableColumn<Lezione,LocalTime> durataTableColumn
+ TableColumn<Lezione,String> codLezioneTableColumn
- Studente studente
- StudenteDAO studenteDAO
- CorsoDAO corsoDAO
- LezioneDAO lezioneDAO
- Corso rowData
+ void initialize(URL,ResourceBundle)
+ void setCorsiTableView()
+ void setLezioniTableView()
- void updateCorsiTableView()
+ void updateLezioniTableView()
+ void disiscriviCorso(String,String)
+ void setDatiUtente(Utente)
}
class com.unina.project.controller.profile.HomepageController.CorsoIdoneo {
~ Boolean Idoneo
+ String getIdoneo()
+ void setIdoneo(Boolean)
}
class com.unina.project.database.postgre.PostgreStudenteDAO {
- JDBC postgreJDBC
+ String setStudente(String)
+ boolean checkStudenteExist(String)
+ void iscriviStudente(String,String)
+ List<Studente> getStudentiDaAccettare(String)
+ List<Studente> getStudente(String,String)
+ List<Studente> getStudentiAccettati(String)
+ String getCodStudente(String)
+ void richiestaAccettata(String,String)
+ void richiestaRifiutata(String,String)
+ boolean checkStudenteIscritto(String,String)
+ Boolean getStudenteIdoneo(String)
}
interface com.unina.project.database.SedeDAO {
~ void insertSede(Sede,String)
}
class com.unina.project.Studente {
- String codStudente
- Boolean Idoneo
- Boolean Presente
- List<Corso> corsi
+ void setCodStudente(String)
+ void setIdoneo(Boolean)
+ String getIdoneo()
+ String getCodStudente()
+ List<Corso> getCorsi()
+ String getPresente()
+ void setPresente(Boolean)
+ void setCorsi(List<Corso>)
}
interface com.unina.project.database.UtenteDAO {
~ void insertUtente(Utente)
~ Utente getUtente(String)
}

class com.unina.project.Autenticazione {
- String email
- String password
+ void setEmail(String)
+ void setPassword(String)
+ String getEmail()
+ String getPassword()
}
interface com.unina.project.database.LezioneDAO {
~ List<Lezione> getLezioni(String)
~ String getCorsoLezione(String)
~ List<Studente> getStudentiPrenotati(String)
~ void insertLezione(Lezione)
~ void updateLezione(Lezione)
~ void deleteLezione(String)
~ void prenotaLezione(String,String)
~ void deletePrenotazioneLezione(String,String)
~ void confermapresenza(String,String)
~ void nonpresente(String,String)
~ List<Lezione> getLezioniPrenotate(String)
~ boolean checkStudenteIscrittoLezione(String,String)
~ Integer countNumeroLezioni(String)
}
class com.unina.project.Lezione {
- String titolo
- String descrizione
- LocalDateTime dataoraInizio
- LocalTime durata
- String codLezione
- String codCorso
+ void setTitolo(String)
+ void setDescrizione(String)
+ void setDataoraInizio(LocalDateTime)
+ void setDurata(LocalTime)
+ void setCodLezione(String)
+ LocalDate getDataInizio()
+ LocalTime getOraInizio()
+ String getTitolo()
+ String getDescrizione()
+ LocalDateTime getDataoraInizio()
+ LocalTime getDurata()
+ String getCodLezione()
+ String getCodCorso()
+ void setCodCorso(String)
}
class com.unina.project.controller.RegistrazioneController {
+ TextField emailTextField
- TextField nomeTextField
- TextField cognomeTextField
- DatePicker dataDatePicker
- TextField comunedinascitaTextField
- ChoiceBox<String> sessoChoiceBox
- TextField codicefiscaleTextField
+ PasswordField passwordField
- ProgressBar passwordProgressBar
+ PasswordField repeatpasswordField
- List<String> comuni
- Utente utente
+ Autenticazione autenticazione
- AutenticazioneDAO autenticazioneDAO
- UtenteDAO utenteDAO
- ChangeListener<Boolean> generaCodiceListner
+ ChangeListener<Boolean> checkEmailListner
+ ChangeListener<Boolean> passwordListner
+ ChangeListener<Boolean> repeatpasswordListner
+ void initialize(URL,ResourceBundle)
+ void getComuni(List<String>)
- void newCodiceFiscale()
- void setDataPicker()
- void restrictDatePicker(DatePicker,LocalDate,LocalDate)
+ void passwordCheck()
- double calcolaPasswordStrength(String,String)
+ void onregistratiButtonClick(ActionEvent)
+ void accountCreatedSuccessful(ActionEvent)
+ void onindietroButtonClick(ActionEvent)
}

com.unina.project.database.CorsoDAO <|.. com.unina.project.database.postgre.PostgreCorsoDAO
javafx.application.Application <|-- com.unina.project.Main
javafx.fxml.Initializable <|.. com.unina.project.controller.ProfileGestoreController
javafx.fxml.Initializable <|.. com.unina.project.controller.profile.IscrizioneLezioniController
javafx.fxml.Initializable <|.. com.unina.project.controller.profile.RichiesteController

com.unina.project.database.JDBC <|.. com.unina.project.database.postgre.PostgreJDBC
com.unina.project.controller.RegistrazioneController <|-- com.unina.project.controller.RegistrazioneGestoreController
com.unina.project.controller.ProfileGestoreController <|-- com.unina.project.controller.CorsoController
com.unina.project.database.UtenteDAO <|.. com.unina.project.database.postgre.PostgreUtenteDAO
com.unina.project.database.StatisticheDAO <|.. com.unina.project.database.postgre.PostgreStatisticheDAO
javafx.fxml.Initializable <|.. com.unina.project.controller.profile.RicercaCorsoController
javafx.fxml.Initializable <|.. com.unina.project.controller.profile.GestioneCorsiController
javafx.fxml.Initializable <|.. com.unina.project.controller.profile.LezioneController
com.unina.project.database.LezioneDAO <|.. com.unina.project.database.postgre.PostgreLezioneDAO
com.unina.project.database.OperatoreDAO <|.. com.unina.project.database.postgre.PostgreOperatoreDAO
com.unina.project.database.SedeDAO <|.. com.unina.project.database.postgre.PostgreSedeDAO
com.unina.project.Utente <|-- com.unina.project.Operatore
javafx.fxml.Initializable <|.. com.unina.project.controller.profile.IscrizioneCorsoController
com.unina.project.controller.profile.LezioneController <|-- com.unina.project.controller.profile.LezioneModificaController
com.unina.project.database.GestoreDAO <|.. com.unina.project.database.postgre.PostgreGestoreDAO
javafx.fxml.Initializable <|.. com.unina.project.controller.LoginController
com.unina.project.database.AutenticazioneDAO <|.. com.unina.project.database.postgre.PostgreAutenticazioneDAO
javafx.fxml.Initializable <|.. com.unina.project.controller.profile.GestioneLezioniController
com.unina.project.controller.CorsoController <|-- com.unina.project.controller.CorsoModificaController
com.unina.project.database.AreaTematicaDAO <|.. com.unina.project.database.postgre.PostgreAreaTematicaDAO
com.unina.project.controller.RegistrazioneGestoreController <|-- com.unina.project.controller.IndirizzoController
javafx.fxml.Initializable <|.. com.unina.project.controller.ModificaDatiAutenticazioneController
javafx.fxml.Initializable <|.. com.unina.project.controller.ResettaPasswordController
javafx.fxml.Initializable <|.. com.unina.project.controller.profile.HomepageController
com.unina.project.controller.profile.HomepageController +.. com.unina.project.controller.profile.HomepageController.CorsoIdoneo
com.unina.project.controller.profile.Corso <|-- com.unina.project.controller.profile.HomepageController.CorsoIdoneo
com.unina.project.database.StudenteDAO <|.. com.unina.project.database.postgre.PostgreStudenteDAO
com.unina.project.Utente <|-- com.unina.project.Studente
javafx.fxml.Initializable <|.. com.unina.project.controller.RegistrazioneController
@enduml